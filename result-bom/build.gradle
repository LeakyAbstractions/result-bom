plugins {
    id 'java-platform'
    id 'maven-publish'
    id 'signing'
}

dependencies {
    constraints {
        api libs.result.api
        api libs.result.core
        api libs.result.assertj
        api libs.result.jackson
        api libs.result.mnserde
        api libs.result.lazy
    }
}

// Configure publishing repositories and publications
publishing {
    repositories {
        if (project.hasProperty('githubUsername') && project.hasProperty('githubPassword')) {
            maven {
                name = 'GitHubPackages'
                url = uri('https://maven.pkg.github.com/LeakyAbstractions/result')
                credentials {
                    username = project.githubUsername
                    password = project.githubPassword
                }
            }
        }
    }
    publications {
        mavenRelease(MavenPublication) {
            pom {
                groupId         = rootProject.group
                artifactId      = project.artifactId
                name            = project.artifactName
                description     = project.artifactDescription
                version         = rootProject.version
                url             = rootProject.homepage
                licenses {
                    license {
                        name    = rootProject.licenseName
                        url     = rootProject.licenseUrl
                    }
                }
                developers {
                    developer {
                        id      = rootProject.developerId
                        name    = rootProject.developerName
                        email   = rootProject.developerEmail
                    }
                }
                organization {
                    name        = rootProject.organizationName
                    url         = rootProject.organizationUrl
                }
                issueManagement {
                    system      = rootProject.issuesSystem
                    url         = rootProject.issuesUrl
                }
                ciManagement {
                    system      = rootProject.ciSystem
                    url         = rootProject.ciUrl
                }
                scm {
                    url         = rootProject.repository
                    connection  = rootProject.checkout
                }
                properties = [
                    "result.api.version":     libs.versions.result.api.get(),
                    "result.core.version":    libs.versions.result.core.get(),
                    "result.assertj.version": libs.versions.result.assertj.get(),
                    "result.jackson.version": libs.versions.result.jackson.get(),
                    "result.mnserde.version": libs.versions.result.mnserde.get(),
                    "result.lazy.version":    libs.versions.result.lazy.get(),
                ]
            }
            from(components.javaPlatform)
        }
    }
}

signing {
    required = project.hasProperty('signingKey') && project.hasProperty('signingPassword')
    useInMemoryPgpKeys(project.findProperty('signingKey'), project.findProperty('signingPassword'))
    sign publishing.publications.mavenRelease
}

if (hasProperty('publishToSonatype')) {
    publish.finalizedBy publishToSonatype
    publishToSonatype.finalizedBy ':closeAndReleaseSonatypeStagingRepository'
}
